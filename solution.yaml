AWSTemplateFormatVersion: 2010-09-09
Description: This template will Terminate ElasticBeanstalk Environments daily.
Resources:
  LambdaRoleForTerminatingElasticBeanstalk:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      RoleName: Stop-LambdaRole-DO-NOT-DELETE-FOR-ELASTICBEANSTALK
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess-AWSElasticBeanstalk'
      Path: /
      Policies:
        - PolicyName: Stop-EB
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:DescribeRegions'
                  - 'ec2:DescribeTags'
                  - 'sts:GetCallerIdentity'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
  LamabdaForTerminatingEB:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: This Function is used terminate the EB env
      Runtime: python3.6
      Timeout: 300
      FunctionName: ElasticBeanstalk-Stop-Lambda-DO-NOT-DELETE
      Handler: index.lambda_handler
      Role: !GetAtt LambdaRoleForTerminatingElasticBeanstalk.Arn
      Tags:
        - Key: auto-delete
          Value: 'no'
      Code:
        ZipFile: |
          import boto3
          def lambda_handler(event, context):
            account_client = boto3.client('sts')
            client = boto3.client('ec2')

            regions = [region['RegionName'] for region in client.describe_regions()['Regions']]
            print(regions)
            for region in regions:
              
                client = boto3.client('elasticbeanstalk' , region_name= region)
                print("region is " +region)
                envs = client.describe_environments(

                    MaxRecords=123
                    
                )

                envlist=[]
                print('terminating these environments-')
                try:
                    for env in envs['Environments']:
                        if env['Status']!='Terminated' and env['Status']!= 'Terminating':
                            delete=True
                            env_arn=env['EnvironmentArn']
                            tags=client.list_tags_for_resource(ResourceArn=env_arn)['ResourceTags']
                            for tag in tags:
                                if( tag['Key'] =='AutoDelete' and tag ['Value'] == 'false'):
                                    delete=False
                            print(env['EnvironmentName'])
                            if(delete==True):
                              print("will delelete this ")  
                              envlist.append(env['EnvironmentName'])
                        
                    print(envlist)
                    for env in envlist:
                        try:
                            response = client.terminate_environment(
                            
                            EnvironmentName=env,
                            TerminateResources=True
                            )
                        except Exception as e:
                          print(e)    

                except Exception as e:
                    print(e)
  EBEventRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: EB-Terminate-DO-NOT-DELETE
      ScheduleExpression: cron(30 13 * * ? *)
      State: ENABLED
      Targets:
        - Arn:
            'Fn::GetAtt':
              - LamabdaForTerminatingEB
              - Arn
          Id: Test
  Permission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref LamabdaForTerminatingEB
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn:
        'Fn::GetAtt':
          - EBEventRule
          - Arn
